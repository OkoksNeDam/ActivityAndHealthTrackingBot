import re

from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from app.utils.utils import get_calories_of
from datetime import datetime

from app.database.requests import user_food_intake_requests

food_consumption_router = Router()


@food_consumption_router.message(Command("log_food"))
async def log_food(message: Message, command: CommandObject):
    """
    Handler for logging food consumption.

    Two values are specified as parameters:
    the name of the product and the number of grams eaten.
    """
    args = command.args.split(' ')
    product_name, n_grams_eaten = args
    if len(args) != 2 or (re.match(r'^-?\d+(?:\.\d+)$', n_grams_eaten) is None and not n_grams_eaten.isdigit()):
        return
    n_grams_eaten = float(n_grams_eaten)
    product_calories = get_calories_of(product_name)
    if not product_calories:
        await message.answer("üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ :(")
        return
    n_calories_eaten = product_calories * n_grams_eaten / 100
    await message.answer(f"üçΩÔ∏è {product_name} - {product_calories} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n"
                         f"üç´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π: {n_calories_eaten} –∫–∫–∞–ª.")
    await user_food_intake_requests.set_food_consumption(tg_id=message.from_user.id,
                                                         food_name=product_name,
                                                         n_calories_consumed=n_calories_eaten,
                                                         date=datetime.now())
    await message.answer("üéÜ –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, —Å–ø–∞—Å–∏–±–æ!")
